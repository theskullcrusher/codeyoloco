# -*- coding: utf-8 -*-
"""
__author__:surajshah
"""

from ictf import iCTF
import os, sys
import ConfigParser
import json
config = os.path.join(os.path.dirname(__file__), 'config.txt')

SERVICE_DICT = {"service1":10001,"service2":10002,"service3":10003,"service4":10004,"service5":10005}
VARIABLES = ["<flag-id>","<token-id>"]
COMMAND = "echo $\"{}\" | nc {} {} -w {}"


def getConfig():
	try:
		configParser = ConfigParser.RawConfigParser()   
		configParser.read(config)
		return configParser
	except Exception as e:
		exc_type, exc_obj, exc_tb = sys.exc_info()
		fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
		print(e, exc_type, fname, exc_tb.tb_lineno)


def get_t():
	try:
		configParser = getConfig()
		team_ip = 'http://' + str(configParser.get("login","team-ip")) + '/'
		i = iCTF(team_ip)

		t = i.login(str(configParser.get("login","username")),
			str(configParser.get("login","password")))
		return t
	except Exception as e:
		exc_type, exc_obj, exc_tb = sys.exc_info()
		fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
		print(e, exc_type, fname, exc_tb.tb_lineno)


def get_service_list():
	return get_t().get_service_list()


def exploits():
	try:
		configParser = getConfig()
		t = get_t()
		services = json.loads(t.get_service_list())
		timeout = str(configParser.get("submit-parameters","nc-timeout"))

		inverse_dict = {v: k for k, v in SERVICE_DICT.iteritems()}
		#generate command to exploit these services
		command_list = []
		flags_list = []
		for each_service in services:
			try:
				service_id = each_service['service_id']
				#port = each_service['port']
			
				if service_id not in inverse_dict:
					print "serviceid not correct.The following serviceid \
					does not exist: ", service_id
					exit()

				service_payload = str(configParser.get("vulnerability",str(inverse_dict[service_id])))
				targets_list = json.loads(t.get_targets(service_id))['targets']
				for target in targets_list:
					try:
						flag_id = target['flag_id']	
						port = target['port']
						hostname = target['hostname']

						for n, variable in enumerate(VARIABLES):
							if variable in service_payload:
								service_payload = service_payload.replace(variable,"{}")
								if n == 0:
									service_payload.format(flag_id)
								if n == 1:
									pass
									#service_payload.format(flag_id)	

						temp_command = COMMAND.format(service_payload,hostname,port,timeout)
						command_list.append(temp_command)

					except Exception as e:
						print "Error in loop targets:", e
						continue
				if command_list != []:
					for bashCommand in command_list:
						process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
						output, error = process.communicate()
						#print output
						if output not None:
							if "FLG" in str(output):
								value = output.split("FLG")
								for i in value[1:]:
									flags_list.append("FLG"+(i.split("\n")[0]).split()[0])

				submit_flags(flags_list)

			except Exception as e:
				print "Error in loop services:", e
				continue

	except Exception as e:
		exc_type, exc_obj, exc_tb = sys.exc_info()
		fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
		print(e, exc_type, fname, exc_tb.tb_lineno)


def submit_flags(flags_list):
	pass

def record_logs():
	pass


if __name__ == '__main__':
	exploits()